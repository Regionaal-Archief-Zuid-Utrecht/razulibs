from dataclasses import dataclass
from razu.config import Config


@dataclass
class Identifiers:
    """Logic for creating & extracting identifiers including URIs, filenames, and CDN paths. """

    config: Config
    
    @property
    def uid_base(self) -> str:
        """Generate a base for UIDs, like 'NL-WbDRAZU-G0321-661'.
        A full UID is generated by appending the object ID to the base, like 'NL-WbDRAZU-G0321-661-4'.
        """
        return (
            f"{self.config.razu_file_id}-"
            f"{self.config.archive_creator_id}-"
            f"{self.config.archive_id}"
        )
    
    @property
    def cdn_base_uri(self) -> str:
        """Generate the base URI for CDN resources, like 'https://g0321.opslag.razu.nl/'."""
        return (
            f"https://{self.config.archive_creator_id.lower()}."
            f"{self.config.storage_base_domain}/"
        )
    
    @property
    def object_uri_prefix(self) -> str:
        """Generate URI prefix for objects, like 'https://data.razu.nl/id/object/NL-WbDRAZU-G0321-661'."""
        return self.make_uri_prefix_from_kind('object')

    @property
    def event_uri_prefix(self) -> str:
        """Generate URI prefix for events, like 'https://data.razu.nl/id/event/NL-WbDRAZU-G0321-661'."""
        return self.make_uri_prefix_from_kind('event')

    @property
    def manifest_filename(self) -> str:
        """Generate the filename of the manifest, like 'NL-WbDRAZU-G0321-661.manifest.json'."""
        return f"{self.uid_base}.{self.config.manifest_suffix}.{self.config.metadata_extension}"
    
    @property
    def eventlog_filename(self) -> str:
        """Generate the filename of the premis eventlog, like 'NL-WbDRAZU-G0321-661.eventlog.json'."""
        return f"{self.uid_base}.{self.config.eventlog_suffix}.{self.config.metadata_extension}"
    
    def make_cdn_uri_from_uid_extension(self, uid: str, extension: str) -> str:
        """Generate a full CDN URI for a resource."""
        return f"{self.cdn_base_uri}{uid}.{extension}"
    
    def make_uri_prefix_from_kind(self, kind: str) -> str:
        """Generate a URI prefix for a specific kind of resource, like 'https://data.razu.nl/id/concept/NL-WbDRAZU-G0321-661'."""
        return (
            f"{self.config.razu_base_uri}"
            f"{self.config.resource_identifier_segment}/"
            f"{kind}/"
            f"{self.uid_base}"
        )
    
    def make_uid_from_id(self, id: str) -> str:
        """Generate a unique identifier, like 'NL-WbDRAZU-G0321-661-4'."""
        return f"{self.uid_base}-{id}"

    def make_uri_from_id(self, id: str) -> str:
        """Generate a URI from an object ID, like 'https://data.razu.nl/id/object/NL-WbDRAZU-G0321-661-4'."""
        uid = self.make_uid_from_id(id)
        return self.make_uri_from_kind_uid('object', uid)

    def make_uri_from_kind_uid(self, kind: str, uid: str) -> str:
        """Generate a URI from a kind and uid, like 'https://data.razu.nl/id/resource/NL-WbDRAZU-G0321-661-4'."""
        return f"{self.config.razu_base_uri}{self.config.resource_identifier_segment}/{kind}/{uid}"

    def make_filename_from_id(self, id: str) -> str:
        """Generate a filename from an object ID, like 'NL-WbDRAZU-G0321-661-4.meta.json'."""
        return f"{self.uid_base}-{id}.{self.config.metadata_suffix}.{self.config.metadata_extension}"

    def extract_id_from_identifier(self, identifier: str) -> str:
        """Extract the object id from a file path or uri, like 'NL-WbDRAZU-G0321-661-4.meta.json'."""
        return identifier.split(f"{self.uid_base}-")[1].split(f".{self.config.metadata_suffix}.{self.config.metadata_extension}")[0]
